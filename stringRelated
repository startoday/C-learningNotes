1. int to string conversion
to_string()

eg:
int n = 123;
string str = to_string(n);

2. char and int conversion
int x = character - '0'

3. operator +
只要等式里有一个string就可以一直用string overload的"+",
但是在开始的两个里必须有有一个是string

4. ways to initialize a string
眼花缭乱，五花八门。。。。

std::string s0 ("Initial string"); //used in egs

default (1)	//empty string constructor (default constructor)
string(); // Constructs an empty string, with a length of zero characters.
eg: 
std::string s1; //s1 is empty

copy (2)	// copy constructor
string (const string& str); // Constructs a copy of str.
eg: 
std::string s2 (s0);  //s2-- Initial string


substring (3)	 //substring constructor
string (const string& str, size_t pos, size_t len = npos);
//Copies the portion of str that begins at the character position pos 
//and spans len characters (or until the end of str, if either str is too short or if len is string::npos).
 eg:
 std::string s3 (s0, 8, 3); // s0 的第八位，长度3 --str


from c-string (4)	 //Copies the null-terminated character sequence (C-string) pointed by s.
string (const char* s);
eg: 
std::string s4 ("A character sequence");

from sequence (5)	 // (5) from buffer
string (const char* s, size_t n); // Copies the first n characters from the array of characters pointed by s.
eg:
std::string s5 ("Another character sequence", 12); //长度12（不算结尾的 \n) --Another char


fill (6)	
string (size_t n, char c); //Fills the string with n consecutive copies of character c.
eg:
std::string s6a (10, 'x'); // --s6a: xxxxxxxxxx
std::string s6b (10, 42);      // 42 is the ASCII code for '*' // --std::string s6a (10, 'x');


range (7)	
template <class InputIterator>
  string  (InputIterator first, InputIterator last); //包前不包后
  // Copies the sequence of characters in the range [first,last), in the same order.
eg：
std::string s7 (s0.begin(), s0.begin()+7); //s7: Initial


(8) initializer list
Copies each of the characters in il, in the same order.

(9) move constructor
Acquires the contents of str.
str is left in an unspecified but valid state.

ref:http://www.cplusplus.com/reference/string/string/string/

5.  reverse a string
    eg: 
    string str = "geeksforgeeks"; 
    reverse(str.begin(), str.end()); //skeegrofskeeg
    
ref:https://www.geeksforgeeks.org/reverse-a-string-in-c-cpp-different-methods/


6.replace in string
用position的话第二个是 len， 用iterator的话即使前后
int main ()
{
  std::string base="this is a test string.";
  std::string str2="n example";
  std::string str3="sample phrase";
  std::string str4="useful.";

  // replace signatures used in the same order as described above:

  // Using positions:                 0123456789*123456789*12345
  std::string str=base;           // "this is a test string."
  str.replace(9,5,str2);          // "this is an example string." (1)
  str.replace(19,6,str3,7,6);     // "this is an example phrase." (2)
  str.replace(8,10,"just a");     // "this is just a phrase."     (3)
  str.replace(8,6,"a shorty",7);  // "this is a short phrase."    (4)
  str.replace(22,1,3,'!');        // "this is a short phrase!!!"  (5)

  // Using iterators:                                               0123456789*123456789*
  str.replace(str.begin(),str.end()-3,str3);                    // "sample phrase!!!"      (1)end -3 前
  str.replace(str.begin(),str.begin()+6,"replace");             // "replace phrase!!!"     (3)
  str.replace(str.begin()+8,str.begin()+14,"is coolness",7);    // "replace is cool!!!"    (4)
  str.replace(str.begin()+12,str.end()-4,4,'o');                // "replace is cooool!!!"  (5)
  str.replace(str.begin()+11,str.end(),str4.begin(),str4.end());// "replace is useful."    (6)
  std::cout << str << '\n';
  return 0;
}


7.parse string
how to split a string by character?
A. 先replace str with whitespace then use string stream
string str = "102:330:3133:76531:451:000:12:44412";
std::replace(str.begin(), str.end(), ':', ' ');  // replace ':' by ' '

vector<int> array;
stringstream ss(str);
int temp;
while (ss >> temp)
    array.push_back(temp); // done! now array={102,330,3133,76531,451,000,12,44412}
    
B.isstringstream 去    
std::istringstream iss(str);
char c; // dummy character for the colon
int a[8];
iss >> a[0];
for (int i = 1; i < 8; i++)
    iss >> c >> a[i];
 
C.如果知道有几个token的话 比如“ ：” 是token
std::sscanf(str, "%d:%d:%d:%d:%d:%d:%d:%d", &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);

D利用stream + getline
//例子中的vector<int> 换成vector string即可
std::vector<int> split(const std::string &s, char delim) {
    std::vector<int> elems;
    std::stringstream ss(s);
    std::string number;
    while(std::getline(ss, number, delim)) {
        elems.push_back(std::stoi(number));
    }
    return elems;
}

// use with:
const std::string numbers("102:330:3133:76531:451:000:12:44412");
std::vector<int> numbers = split(numbers, ':');

E. use boost and split
#include <string>
#include <boost/algorithm/string.hpp>
 
template <class Container>
void split5(const std::string& str, Container& cont,
              const std::string& delims = " ")
{
    boost::split(cont, str, boost::is_any_of(delims));
}


#其他可行方法： 
ref： http://www.martinbroadhurst.com/how-to-split-a-string-in-c.html



8. atoi() vs stoi()
Basically the C function atoi() converts C-strings (nul terminated character arrays) to an integer. 
The C++ stoi() converts the C++ string to an integer. 
Note that the atoi() function will silently fail if the string is not convertible to an int, while by default stoi() will throw an exception.
有一个tricky的点是
如果atoi 处理的串是‘0’，那么无法知道是失败了还是咋的
并且对于atoi（）：
No-throw guarantee: this function never throws exceptions.
If str does not point to a valid C-string, or if the converted value would be out of the range of values representable by an int, it causes undefined behavior.
不知道会怎么样。。All in all 尽量用stoi 或者其他的string function， 毕竟都是c++的哇！ atoi是c的！！


