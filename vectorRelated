for vector<vector<xxx>> v2d:

int size_row = v2d.size();
int size_col = v2d[0].size();

一个待查的问题 关于 empty 和 size（） 
[]
[[]]

对于这种2d empty 只包上面不包下面

尽量使用empty而不是size()==0 来判断容器是否为空//empty（）是常数时间，size（）不是

vector 不是stable iterator 一些操作， 如删除，会使iter失效

1.insert() （3种）
A. 插入一个元素
iterator insert (iterator position, const value_type& val);
例子：
  it = myvector.begin();  //另外，it 是begin时是在最前面（第0个元素前）插入， 
  it = myvector.insert ( it , 200 );
  v.insert(v.begin()+2,1);   // 在第二个元素前插入新元素 
  v.insert(v.end(),3);       //end（）是在在末尾追加新元素
  vector<int>::iterator iter = find( v1.begin(), v1.end(), 3); //利用find function 找到iter指定位置
  if( iter !=  v1.end() ){    //也是用iter是否是end（）来看表中有木有这个元素
    v1.insert( iter, 6 );
  }


B. 插入几个相同元素， 第二个参数是几个 
void insert (iterator position, size_type n, const value_type& val);
例子：
 myvector.insert (it,2,300); //此时之前定义的it已经不再valid了，需要重新assign 


C 插入一个range；传的参数：加入位置，要加的range，需要用iterator表示
void insert (iterator position, InputIterator first, InputIterator last);

例子：把一个vector里的元素append入另外一个vector
std::vector<int> src;
std::vector<int> dest;
dest.insert(dest.end(), src.begin(), src.end());




参考：http://www.cplusplus.com/reference/vector/vector/insert/


2.初始化方式
eg:有另一数组 int  v1[10] = {0,1,0,0,3,0,0,4,4,4};

A.循环增加
vector<int> v2 (10) //初始化size为10
//或者 v2.reserve(10)
for( int i=0; i<10; i++ )
{
     v2.push_back(v1[i]);  //增加一个元素
}

B.使用原数组的指针作为迭代器
vector<int> v3(&v1[0],&v1[9]);

C.insert来实现
vector<int> v4;
v4.reserve(10);
v4.insert(v4.begin(), &v1[0], &v[9]);

D.copy
vector<int> v5(10);
copy(v5.begin(), &v1[0], &v1[9]);
vector v(10,0); // 
vector v3(v.begin(), v.end())

原始数组的元素指针可以作为迭代器来使用。
原则：尽量使用reserve来减少不必要的内存分配次数。//如果已知大小的话

E.fill初始化
vector v(10,0); // {0,0,0,0,0,0,0,0,0,0}

F.assign
v1.assign(10, 0); // v1 設 10 個 0
v1.assign(v.begin(), v.end()); // v1 複制 v
v1.assign(v.begin(), v.begin()+5); // 複製 v 前5個元素到 v1
v1.assign(array, array+5); // 複製 array 前5個元素到 v1


3.遍历的几种方式
方式1：for loop 循环
for( int i=0; i<v1.size(); i++ ){
       print(v1[i]);
}
缺点 不够简洁
方式2：for+迭代器range
typedef  vector<int>:: iterator   VIntIterator;
VIntIterator  end = v1.end();
for( VIntIterator  i=v1.begin(); i != end;  ++i ){
     print( *i );
}

先计算end 不必要每次去重复计算end,vector的end()不是常数时间的，所以先缓存下来能提高效率。
写算法的时候尽量使用!=比较迭代器，因为<对于很多非随机迭代器没有这个操作符。 
这种方式也写起来比较繁琐。

方式3：利用for_each (algorithm)
//std::for_each is an STL algorithm 
//it takes a collection of elements (in the form of a begin and end iterator) 
//and a function (or function object), and applies the function on each element of the collection. 

for_each( v1.begin(),  v1.end(),  print );

std::vector<int> numbers = {1, 2, 3, 4, 5};
std::for_each(begin(numbers), end(numbers), f);  //applies the function f on each element of numbers.

使用算法的时候和函数对象function object 例子
class OutPut{
public:
       void operator ()( double  i ){
          std::cout <<  i;
       }
}
for_each( v1.begin(), v1.end(), OutPut );

对于for_each() 的一点补充：
//bad usage
std::for_each(begin(numbers), end(numbers), [](int number)
{
    // do something with number
});
for_each is a tool for raising the level of abstraction of a range-based for loop. 
And showing the inside of the lambda within the call to for_each kills this purpose.

ref：https://www.fluentcpp.com/2018/03/30/is-stdfor_each-obsolete/ 
ref：https://www.cnblogs.com/caoshenghe/archive/2010/01/31/1660399.html


4.对于2D matrix 的初始化
void reserve (size_type n);
reserve 只能传一个参数
所以对于2D vector<vector<int>> res;
res.reserve(7) 只会reserve 七个 0-size的空vector，这些0 size 的没法直接加东西，只能resize之后再加
所以prefer的方式是在 declare的时候直接写size
vector<vector<int>> res(7, vector<int>{}) 即可



5.找vector里的最大最小值： 传参-range的iterator； return iter 需要用value的时候dereference 一下
double max = *max_element(vector.begin(), vector.end());
double min = *min_element(vector.begin(), vector.end());
 
 
6.对于2Dmatrix （mXn) 展开蛇形连接后的index 和原位置的关系

matrix[index/n][index%n]=matrix[行][列]

eg： 一个2by2 matrix index为 1 的那个数在原matrix 中的位置
matrix[1/2][1%2]=matrix[0][1]    //除完是第几排， 余数是剩的该行index
 
7.取元素的方式
vec[i] - 存取索引值為 i 的元素值。
vec.at(i) - 存取索引值為 i 的元素的值，
vec.front() - 回傳 vector 第一個元素的值。
vec.back() - 回傳 vector 最尾元素的值。
***
用 operator[] 可能會 Segmentation Fault。
***
以 at() 存取會做陣列邊界檢查，如果存取越界將會拋出一個例外，
這是與operator[]的唯一差異。撰寫較嚴肅、安全性較高的程式時使用 at()。
***



8. 取得長度/容量的用法

vec.empty() - 如果 vector 內部為空，則傳回 true 值。
vec.size() - 取得 vector 目前持有的元素個數。
vec.resize() - 改變 vector 目前持有的元素個數。
vec.capacity() - 取得 vector 目前可容納的最大元素個數(即拥有的总共空间， 大于等于size）。它通常只會增加，不會因為元素被刪減而隨之減少。

重新配置／重設長度
vec.reserve() - 如有必要，可改變 vector 的容量大小。
***
在眾多的 STL 實做，容量只能增加，不可以減少。
***

#empty() 和 size()==0

不建議使用 size()==0 判斷容器是否為空，用 empty() 判斷較恰當。
並不是所有容器的 size() 都是 O(1)，例如 <list> 是 linked list 結構，其 size() 是 O(n)。


每個 vector 都有兩個重要的數字：容量 (capacity) 和長度 (size) 。

容量 (capacity) : 是這個 vector 擁有的空間。
長度 (size) : 是實際儲存了元素的空間大小。capacity 永遠不小於 size。

reserve() 的目的是擴大容量。
做完時，vector 的長度不變，capacity 只會長大不會縮小，資料所在位置可能會移動 (因為會重配空間)。
因為 vector 一開始是空的，立刻預留顯然比填了資料後才預留省了拷貝資料的時間。

resize() 的目的是改變 vector 的長度。做完時，vector 的長度會改變為指定的大小，capacity 則視需要調整，確保不小於 size，資料所在位置可能會移動。
如果變小就擦掉尾巴的資料，如果變大就補零。補零如果會超過容量，會做重配空間的動作。

9. iterator
vec.begin() - 回傳一個 iterator，它指向 vector 第一個元素。
vec.end() - 回傳一個 iterator，它指向 vector 最尾端元素的下一個位置（請注意：它不是最末元素）。
vec.rbegin() - 回傳一個反向 iterator，它指向 vector 最尾端元素的。
vec.rend() - 回傳一個 iterator，它指向 vector 的第一個元素。

ref: 
https://mropengate.blogspot.com/2015/07/cc-vector-stl.html


10. 取sub vector的两种方式
A 用range
template<typename T>
std::vector<T> slice(std::vector<T> const &v, int m, int n)
{
	auto first = v.cbegin() + m;
	auto last = v.cbegin() + n + 1;

	std::vector<T> vec(first, last);
	return vec;
}
B 用copy
template<typename T>
std::vector<T> slice(std::vector<T> &v, int m, int n)
{
	std::vector<T> vec(n - m + 1);
	std::copy(v.begin() + m, v.begin() + n + 1, vec.begin());
	return vec;
}

https://www.techiedelight.com/get-slice-sub-vector-from-vector-cpp/

11.null与vector
如果是 null 可以直接return {}
如果是return 一个NULL ptr的 vector 可以直接{NULL}


