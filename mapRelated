0.将map按照value排序， map没有像vector一样的sort（）函数
方法. 将map中的key和value分别存放在一个pair类型的vector中，然后利用vector的sort函数排序:
bool cmp(const pair<int,int> &p1,const pair<int,int> &p2)//要用常数，不然编译错误 
{
	return p1.second<p2.second;
}
int main(void)  
{  
   map<int,int> mp;
   mp[1]=4;
   mp[2]=3;
   mp[3]=2;
   mp[4]=1;
   vector<pair<int,int> > arr;
   for (map<int,int>::iterator it=mp.begin();it!=mp.end();++it)
   {
   	cout<<it->first<<'\t'<<it->second<<endl;
   	arr.push_back(make_pair(it->first,it->second));
   }
   sort(arr.begin(),arr.end(),cmp);
   for (vector<pair<int,int> >::iterator it=arr.begin();it!=arr.end();++it)
   {
   	cout<<it->first<<'\t'<<it->second<<endl;
   }
   return 0;  
}  

#https://blog.csdn.net/acidgl8757/article/details/17416439

1. map以RBTree作为底层容器
-所有元素都是键+值存在 --key-value 意义映射
-不允许键重复 -- 重复键的会overwrite
-所有元素是通过键进行自动排序的
-map的键是不能修改的，但是其键对应的值是可以修改的

RBTree的map 查询 删除，插入都是 O（lgN）

--unordered_map (hash base) in C++11 standard  / hash_map not in standard
###注意！！！map和set这种红黑树的iter 和 vector 不一样，没有overload +， -什么的，使用的时候少给自己找麻烦。。

1.declare
map<string, string > student

2.insert()
// 用 insert 函數插入 pair
    student.insert(pair<string, string>("00", "Kai"));

//用 "array" 方式插入
    student["0033"] = "Taylor";
    student["456"] = "Justin";
    
3.find()
有的话返回iter位置，没有的话返回end（）
iter = student.find("r123");

if(iter != student.end())
       cout<<"Find, the value is"<<iter->second<<endl;
else
   cout<<"Do not Find"<<endl;
   
   
4.erase() 删除
//迭代器刪除
iter = student.find("r123");
student.erase(iter);

//用關鍵字刪除
int n = student.erase("r123");//如果刪除了會返回1，否則返回0

//用迭代器範圍刪除 : 把整個map清空
student.erase(student.begin(), student.end());
//等同於student.clear()


5.lower_bound () and upper_bound for map
std::map::lower_bound
iterator lower_bound (const key_type& k);
const_iterator lower_bound (const key_type& k) const;
Eg:
  mymap['a']=20;
  mymap['b']=40;
  mymap['c']=60;
  mymap['d']=80;
  mymap['e']=100;

  itlow=mymap.lower_bound ('b');  // itlow points to b
  itup=mymap.upper_bound ('d');   // itup points to e (not d!) upper bound是要大于的第一个

  mymap.erase(itlow,itup);        // erases [itlow,itup)

6.map 中的 边循环边删除
--删除之后iterator失效了必须重搞
for(auto iter1 = theMap.begin(); iter1 != theMap.end(); )
{
	if(iter1->second == xxx)
	{
		theMap.erase(iter1++); //#1 
	}else
	{
		++iter1;
	}
} 
