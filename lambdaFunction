auto glambda = [](auto a, auto&& b) { return a < b; };
0.
Syntax
[ captures ] <tparams>(optional)(c++20) ( params ) specifiers exception attr -> ret requires(optional)(c++20) { body }	(1)	
[ captures ] ( params ) -> ret { body }	(2)	
[ captures ] ( params ) { body }	(3)	
[ captures ] { body }	(4)	
1) Full declaration.

2) Declaration of a const lambda: the objects captured by copy are const in the lambda body.

3) Omitted trailing-return-type: the return type of the closure's operator() is deduced from return statements as if for a function whose return type is declared auto.

4) Omitted parameter list: function takes no arguments, as if the parameter list was (). This form can only be used if none of constexpr, mutable, exception specification, attributes, or trailing return type is used.


captures：a comma-separated list of zero or more captures, optionally beginning with a capture-default.
需要捕捉的东西（可以是一个比较时需要用到的array） 如果是global，static的情况下不需要传递(  []  )
A lambda expression can use a variable without capturing it if the variable is a non-local variable 
or has static or thread local storage duration (in which case the variable cannot be captured), 
or is a reference that has been initialized with a constant expression.
A lambda expression can read the value of a variable without capturing it 
--if the variable has const non-volatile integral or enumeration type and has been initialized with a constant expression, 
or is constexpr and has no mutable members.

<tparams> : 限制generic，可用于C++20之后 和<params> 一旦auto就会进入generic模式
<tparams>(C++20):a template parameter list (in angle brackets), used to provide names to the template parameters of a generic lambda (see ClosureType::operator() below). 
Like in a template declaration, the template parameter list may be followed by an optional requires-clause, which specifies the constraints on the template arguments. 
If provided, the template parameter list cannot be empty (<> is not allowed).
params: The list of parameters, as in named functions, except that default arguments are not allowed (until C++14). 
If auto is used as a type of a parameter, the lambda is a generic lambda. (since C++14)


Lambda主要分为五个部分：[函数对象参数]、(操作符重载函数参数)、mutable或exception声明、-> 返回值类型、{函数体}。
一、[函数对象参数]，标识一个Lambda的开始，这部分必须存在，不能省略。函数对象参数是传递给编译器自动生成的函数对象类的构造函数的。函数对象参数只能使用那些到定义Lambda为止时Lambda所在作用范围内可见的局部变量（包括Lambda所在类的this）。函数对象参数有以下形式：

1、空。没有使用任何函数对象参数。
2、=。函数体内可以使用Lambda所在作用范围内所有可见的局部变量（包括Lambda所在类的this），并且是值传递方式（相当于编译器自动为我们按值传递了所有局部变量）。
3、&。函数体内可以使用Lambda所在作用范围内所有可见的局部变量（包括Lambda所在类的this），并且是引用传递方式（相当于编译器自动为我们按引用传递了所有局部变量）。
4、this。函数体内可以使用Lambda所在类中的成员变量。
5、a。将a按值进行传递。按值进行传递时，函数体内不能修改传递进来的a的拷贝，因为默认情况下函数是const的。要修改传递进来的a的拷贝，可以添加mutable修饰符。
6、&a。将a按引用进行传递。
7、a, &b。将a按值进行传递，b按引用进行传递。
8、=，&a, &b。除a和b按引用进行传递外，其他参数都按值进行传递。
9、&, a, b。除a和b按值进行传递外，其他参数都按引用进行传递。
二、(操作符重载函数参数)，标识重载的()操作符的参数，没有参数时，这部分可以省略。参数可以通过按值（如：(a,b)）和按引用（如：(&a, &b)）两种方式进行传递。

三、mutable或exception声明，这部分可以省略。按值传递函数对象参数时，加上mutable修饰符后，可以修改按值传递进来的拷贝（注意是能修改拷贝，而不是值本身）。exception声明用于指定函数抛出的异常，如抛出整数类型的异常，可以使用throw(int)。

四、-> 返回值类型，标识函数返回值的类型，当返回值为void，或者函数体中只有一处return的地方（此时编译器可以自动推断出返回值类型）时，这部分可以省略。

五、{函数体}，标识函数的实现，这部分不能省略，但函数体可以为空。



1. for a sort function example:
sort(A.begin(), A.end(), [key](int c, int d){
            return key[c] < key[d];
        });



2.function<void(int)>  print_fun = [](int item){cout<<item<<endl; }; //int  item函数参数
c.erase(std::remove_if(c.begin(), c.end(), [x](int n) { return n < x; } ), c.end());


3. sort map by value lambda function
[](std::pair<std::string, int> elem1 ,std::pair<std::string, int> elem2) {
            return elem1.second < elem2.second;
};
4. same 2d array, sort by arr[x][0]
sort(logs.begin(), logs.end(), [] (const vector<int> &a, const vector<int> &b) {return a[0] < b[0];});
